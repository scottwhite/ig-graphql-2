schema {
  query: Query
  mutation: Mutation
}

type Conductor{
  id: ID!
  name: String!
  description: String
  ipAddress: String!
  port: Int!
  organizationId: ID!
  fingerprint: String!
  lastPinged: String
}

input ConductorInput{
  name: String!
  organizationId: ID!
  fingerprint: String!
  ipAddress: String!
  port: Int!
}

type Collector{
  id: ID!
  name: String!
  description: String
  ipAddress: String!
  port: Int!
  organizationId: ID!
  fingerprint: String!
  lastPinged: String
  conductorId: ID
}

type Schedule {
  id: ID!
  organizationId: ID!
  name: String!
  interval:  Int! 
  conductor: Conductor!
}

input ScheduleInput {
  organizationId: ID!
  name: String!
  interval:  Int!
  conductorId: ID
}

type Location {
  id: ID!
  name: String!
  latitude: String
  longitude: String
  street1: String
  street2: String
  city: String
  zipCode: String
  organizationId: ID!
}

type OS{
  id: String
  name: String!
  manufacturerId: ID!
}

type OSVersion {
  id: String
  name: String!
  version: String!
  os: OS
}

enum CiClass {
  Server
  File
  Application
  Network
  Storage
  Security
}

type Ci{
  id: ID!
  name: String!
  organizationId: ID!
  comments: String
  stateId: ID!
  location: Location
  lastChecked: String
  recordSource: String
  collectorId: String
  createdOn: String!
  baselineAt: String
  sshPort: String
  ciClass: String!
  isCloud: Boolean!
}

type Query{
  getCis: [Ci]
  getConductors: [Conductor]
  getConductor(id: ID!): Conductor
  getSchedules: [Schedule]
  getSchedule(id: ID!): Schedule
}

type Mutation{
  createConductor(conductor: ConductorInput!): Conductor!
  updateConductor(conductor: ConductorInput!): Conductor!
  deleteConductor(id: ID!): Int
  createSchedule(schedule: ScheduleInput!): Schedule!
  updateSchedule(schedule: ScheduleInput!): Schedule!
  deleteSchedule(id: ID!): Int
}